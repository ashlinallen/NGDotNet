/// <binding ProjectOpened='Hot' />
'use strict';

var path = require('path'),
    PATHS = require('./paths.config'),
    webpack = require('webpack'),
    autoprefixer = require('autoprefixer'),
    Clean = require('clean-webpack-plugin'),
    HtmlWebpackPlugin = require('html-webpack-plugin'),
    ExtractTextPlugin = require('extract-text-webpack-plugin');

var config = {
    cache: true,
    debug: false,
    devServer: {
        proxy: {
            '/api/*': {
                target: 'http://ngdotnet.local:80/'
            }
        }
    },
    entry: {
        'app': [
            PATHS.appEntryPoint
        ],
        'vendor': [
            'angular',
            'angular-animate',
            'angular-bootstrap',
            'angular-route',
            'angular-sanitize',
            'angular-ui-router',
            'angularplus',
            'bootstrap',
            'font-awesome-webpack',
            'jquery',
            'moment',
            'toastr'
        ]
    },
    module: {
        loaders: [
            {
                test: /\.html$/,
                loader: 'ng-cache-loader?prefix=[dir]/[dir]!html-minify',
                exclude: path.join(PATHS.clientAppDir, PATHS.indexTemplate) // Exclude the index template so html-webpack-plugin can handle it
            },
            {
                test: /\.css$/,
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader')
            },
            {
                test: /\.scss$/,
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader!sass-loader')
            },
            {
                test: /\.(png|jpg|jpeg|gif|ico)$/,
                loader: 'url-loader?limit=100000'
            },
            { 
                test: /\.(ttf|eot|svg|woff(2)?)(\?v=[0-9]\.[0-9]\.[0-9])?$/, 
                loader: 'file-loader' 
            }
        ]
    },
    output: {
        filename: '[name].[hash].min.js',
        chunkFilename: '[hash].js',
        path: PATHS.buildDir,
        publicPath: '/'
    },
    plugins: [
        new Clean(PATHS.buildDir),
        new webpack.optimize.CommonsChunkPlugin({
            names: ['vendor'], 
            filename: '[name].[hash].js',
            minChunks: Infinity
        }),
        new ExtractTextPlugin('[name].[hash].min.css'),
        new HtmlWebpackPlugin({
            template: path.join(PATHS.clientAppDir, PATHS.indexTemplate),
            favicon: path.join(PATHS.clientAppDir, PATHS.favIcon),
            inject: 'body',
            filename: 'index.html',
            minify: {
                removeComments: true,
                removeCommentsFromCDATA: true,
                removeCDATASectionsFromCDATA: true,
                collapseWhitespace: true,
                collapseBooleanAttributes: true,
                removeTagWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeScriptTypeAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                caseSensitive: true,
                minifyJS: true,
                minifyCSS: true,
                includeAutoGeneratedTags: true
            }
        }),
        new webpack.ProvidePlugin({ $: 'jquery', jQuery: 'jquery' }),
        new webpack.optimize.OccurrenceOrderPlugin(true),
        new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /en/)
    ],
    postcss: [
        autoprefixer({ browsers: ['last 10 versions', '> 10%', '> 5% in US', 'Explorer >= 9'] })
    ]
};

module.exports = config;